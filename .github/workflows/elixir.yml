name: Elixir CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  ELIXIR_VERSION: 1.9.4
  OTP_VERSION: 22.2

jobs:
  # Build the dialyzer core PLT and dependency caches early.
  lint_caches:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup elixir
        uses: actions/setup-elixir@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }} # Define the elixir version [required]
          otp-version: ${{ env.OTP_VERSION }} # Define the OTP version [required]
      - name: Cache Dependencies
        id: cache-deps
        uses: actions/cache@v1
        with:
          path: deps
          key: ${{ hashFiles('**/mix.lock') }}-deps
      - name: Get Dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: mix deps.get
      - name: Cache Core PLTs
        id: cache-core-plts
        uses: actions/cache@v1
        with:
          path: ~/.mix
          key: ${{ env.ELIXIR_VERSION }}-core-plt
      - name: Cache PLTs
        id: cache-plts
        uses: actions/cache@v1
        with:
          path: _build/dev
          key: ${{ hashFiles('**/mix.lock') }}-all-plts
      - name: Build PLTs
        if: steps.cache-core-plts.outputs.cache-hit != 'true' || steps.cache-plts.outputs.cache-hit != 'true'
        run: mix dialyzer --plt
  lint:
    needs: lint_caches
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup elixir
        uses: actions/setup-elixir@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }} # Define the elixir version [required]
          otp-version: ${{ env.OTP_VERSION }} # Define the OTP version [required]
      - name: Cache Dependencies
        id: cache-deps
        uses: actions/cache@v1
        with:
          path: deps
          key: ${{ hashFiles('**/mix.lock') }}-deps
      - name: Cache Core PLTs
        id: cache-core-plts
        uses: actions/cache@v1
        with:
          path: ~/.mix
          key: ${{ env.ELIXIR_VERSION }}-core-plt
      - name: Cache PLTs
        id: cache-plts
        uses: actions/cache@v1
        with:
          path: _build/dev
          key: ${{ hashFiles('**/mix.lock') }}-all-plts
      - name: Check Credo
        run: mix credo --strict
      - name: Run the Dialyzer
        run: env MIX_ENV=test mix dialyzer
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pair:
          - {erlang: 23.1, elixir: 1.11}

          - {erlang: 22.2, elixir: 1.11}
          - {erlang: 22.2, elixir: 1.10.4}
          - {erlang: 22.2, elixir: 1.9.4}
          - {erlang: 22.2, elixir: 1.8}
          - {erlang: 22.2, elixir: 1.7}

          - {erlang: 21.3, elixir: 1.9}
          - {erlang: 21.3, elixir: 1.8}
          - {erlang: 21.3, elixir: 1.7}

    steps:
      - uses: actions/checkout@v2
      - name: Setup elixir
        uses: actions/setup-elixir@v1
        with:
          elixir-version: ${{ matrix.pair.elixir }} # Define the elixir version [required]
          otp-version: ${{ matrix.pair.erlang }} # Define the OTP version [required]
      - name: Cache Dependencies
        id: cache-deps
        uses: actions/cache@v1
        with:
          path: deps
          key: ${{ hashFiles('**/mix.lock') }}-deps
      - name: Get Dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: mix deps.get
      - name: Install Dependencies
        run: env MIX_ENV=TEST mix do deps.get, deps.compile
      - name: Compile PropCheck
        run: env MIX_ENV=TEST mix compile --warnings-as-errors
      - name: Run Tests
        run: PROPCHECK_DEBUG=1 PROPCHECK_VERBOSE=1 PROPCHECK_NUMTESTS=200 PROPCHECK_SEARCH_STEPS=1000 mix tests --cover --trace
